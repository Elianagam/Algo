TestCase subclass: #CompraConEnvioTest	instanceVariableNames: 'compra envio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!CompraConEnvioTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:49'!testCompraConEnvioQueSuperaLos5000SeBonifica	| producto |	producto := Producto crearProducto: 'Notebook' conPrecio: 12000.		compra agregarProducto: producto.		self deny: (compra obtenerCostoTotal = (producto obtenerPrecio + envio valor)).	self assert: (compra obtenerCostoTotal = producto obtenerPrecio)! !!CompraConEnvioTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:51'!testCompraConEnvioYCuponEsPrecioProductoMasEnvioMenosPorcentajeCupon	| producto cupon |	producto := Producto crearProducto: 'Camara' conPrecio: 4000.	cupon := Cupon conPorcentaje: 20.		compra agregarCupon: cupon.	compra agregarProducto: producto.		self assert: (compra obtenerCostoTotal = ((producto obtenerPrecio + envio valor) - ((producto obtenerPrecio + envio valor) * (cupon valor)))).! !!CompraConEnvioTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:49'!testCompraConEnvioSinProductosManejaElErrorParaNoDevolverSoloElCostoDeEnvio		self assert: (envio valor = 100).	self assert: (compra obtenerCostoTotal = 0).! !!CompraConEnvioTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:49'!testCompraConEnvioQueNoSuperaLos5000NoEsBonificado	| producto |	producto := Producto crearProducto: 'Camara' conPrecio: 4000.		compra agregarProducto: producto.		self assert: (compra obtenerCostoTotal = (producto obtenerPrecio + envio valor)).! !!CompraConEnvioTest methodsFor: 'initialization' stamp: 'elianagam 9/19/2017 23:49'!setUp	compra := Compra conEnvio.	envio := Envio new.! !TestCase subclass: #CompraConEnvioYGarantiaTest	instanceVariableNames: 'compra garantia envio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!CompraConEnvioYGarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/20/2017 00:06'!testCompraConEnvioYGarantiaYCuponEsPrecioProductoMasEnvioMenosPorcentajeCupon	| producto cupon resultadoParcial |	producto := Producto crearProducto: 'Camara' conPrecio: 4000.	cupon := Cupon conPorcentaje: 20.		compra agregarCupon: cupon.	compra agregarProducto: producto.		resultadoParcial := producto obtenerPrecio + envio valor + garantia valor.	self assert: (compra obtenerCostoTotal = (resultadoParcial - (resultadoParcial * (cupon valor)))).! !!CompraConEnvioYGarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/20/2017 00:03'!testCompraConEnvioYGarantiaSinProductosElCostoEsCero		self assert: (compra obtenerCostoTotal = 0).! !!CompraConEnvioYGarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:57'!testCompraConEnvioYGarantiaDeUnProductoEsPrecioDelProductoMas100Mas10Porciento	| producto |	producto := Producto crearProducto: 'Camara' conPrecio: 4000.	compra agregarProducto: producto.		self assert: (compra obtenerCostoTotal = (producto obtenerPrecio + garantia valor + envio valor)).! !!CompraConEnvioYGarantiaTest methodsFor: 'initialization' stamp: 'elianagam 9/19/2017 23:58'!setUp	compra := Compra conEnvio conGarantia.	envio := Envio new.	garantia := Garantia deCompra: compra.! !TestCase subclass: #CompraConGarantiaTest	instanceVariableNames: 'compra garantia'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!CompraConGarantiaTest methodsFor: 'initialization' stamp: 'elianagam 9/19/2017 23:54'!setUp	compra := Compra conGarantia.	garantia := Garantia deCompra: compra.! !!CompraConGarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:54'!testCompraConGarantiaEsCostoProductoMas10Porciento	| producto |	producto := Producto crearProducto: 'Notebook' conPrecio: 1200.	compra agregarProducto: producto.		self assert: (compra obtenerCostoTotal = (producto obtenerPrecio + garantia valor)).! !!CompraConGarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/20/2017 00:07'!testCompraConEnvioYGarantiaYCuponEsPrecioProductoMasEnvioMenosPorcentajeCupon	| producto cupon resultadoParcial |	producto := Producto crearProducto: 'Camara' conPrecio: 4000.	cupon := Cupon conPorcentaje: 20.		compra agregarCupon: cupon.	compra agregarProducto: producto.		resultadoParcial := producto obtenerPrecio + garantia valor.	self assert: (compra obtenerCostoTotal = (resultadoParcial - (resultadoParcial * (cupon valor)))).! !!CompraConGarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/20/2017 00:03'!testCompraConGarantiaSinProductosElCostoEsCero		self assert: (compra obtenerCostoTotal = 0).! !TestCase subclass: #CompraTest	instanceVariableNames: 'compra'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!CompraTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 22:26'!testCompraConEnvioYGarantiaDeUnProductoEsPrecioDelProductoMas100Mas10Porciento	| producto envio garantia |	(compra conEnvio) conGarantia.	producto := Producto crearProducto: 'Camara' conPrecio: 4000.	compra agregarProducto: producto.	envio := Envio new.	garantia := Garantia deCompra: compra.		self assert: (compra obtenerCostoTotal = (producto obtenerPrecio + garantia valor + envio valor)).! !!CompraTest methodsFor: 'tests' stamp: 'elianagam 11/12/2011 21:51'!testCompraSimpleYElTotalEsCeroPorqueNoSeComproNada		self assert: (compra obtenerCostoTotal = 0).			! !!CompraTest methodsFor: 'tests' stamp: 'elianagam 11/12/2011 21:46'!testCompraSimpleDeUnProductoConCuponDe50PorcientoEsLaMitadDelPrecioDelProducto	| producto cupon |	producto := Producto crearProducto: 'Camara' conPrecio: 4000.	cupon := Cupon conPorcentaje: 50.		compra agregarCupon: cupon.	compra agregarProducto: producto.		self assert: (compra obtenerCostoTotal = (producto obtenerPrecio - (producto obtenerPrecio * cupon valor))).	self assert: (compra obtenerCostoTotal = (producto obtenerPrecio / 2)).! !!CompraTest methodsFor: 'tests' stamp: 'elianagam 11/12/2011 21:51'!testCompraSimpleConSoloUnProductoEsPrecioDelProducto	| producto |	producto := Producto crearProducto: 'Notebook' conPrecio: 12000.		compra agregarProducto: producto.		self assert: (compra obtenerCostoDeProductos = producto obtenerPrecio).					! !!CompraTest methodsFor: 'initialization' stamp: 'elianagam 11/11/2011 16:07'!setUp	compra := Compra new.! !TestCase subclass: #CuponTest	instanceVariableNames: 'cupon'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!CuponTest methodsFor: 'initialization' stamp: 'elianagam 11/11/2011 16:05'!setUp	cupon := Cupon new.! !!CuponTest methodsFor: 'tests' stamp: 'elianagam 11/11/2011 16:48'!testCrearCuponConPorcentajeNegativoLanzaError		self should: [ cupon conPorcentaje: -20 ] raise: ValorNegativoError.! !!CuponTest methodsFor: 'tests' stamp: 'elianagam 11/11/2011 16:16'!testCrearCuponConPorcentajeYValorDevuelvePorcentaje	cupon conPorcentaje: 20.		self assert: (cupon valor = (20/100)).! !TestCase subclass: #EnvioTest	instanceVariableNames: 'envio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!EnvioTest methodsFor: 'initialization' stamp: 'elianagam 11/11/2011 16:04'!setUp	envio := Envio new.! !!EnvioTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 22:18'!testEnvioSeAdicionaElCostoElValorEs100		self assert: (envio valor = 100).! !TestCase subclass: #GarantiaTest	instanceVariableNames: 'garantia compra producto'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!GarantiaTest methodsFor: 'initialization' stamp: 'elianagam 9/19/2017 23:11'!setUp	compra := Compra conGarantia.	garantia := Garantia deCompra: compra.! !!GarantiaTest methodsFor: 'tests' stamp: 'elianagam 9/19/2017 23:35'!testGarantiaSeAdicionaElCostoYElValorEs10Porciento		producto := Producto crearProducto: 'Notebook' conPrecio: 1200.	compra agregarProducto: producto.		self assert: (compra obtenerCostoTotal = (producto obtenerPrecio + garantia valor)).! !TestCase subclass: #ProductoTest	instanceVariableNames: 'producto'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Test'!!ProductoTest methodsFor: 'initialization' stamp: 'elianagam 11/11/2011 16:09'!setUp	producto := Producto new.! !!ProductoTest methodsFor: 'tests' stamp: 'elianagam 11/11/2011 16:09'!testCrearProductoSinAtributosDevuelvePrecioCeroYNombreNil		self assert: (producto obtenerPrecio = 0).	self assert: (producto obtenerNombre = nil).! !!ProductoTest methodsFor: 'tests' stamp: 'elianagam 11/11/2011 18:29'!testCrearProductoConPrecioYNombre		producto crearProducto: 'Notebook' conPrecio: 9000.		self assert: (producto obtenerPrecio = 9000).	self assert: (producto obtenerNombre = 'Notebook').! !!ProductoTest methodsFor: 'tests' stamp: 'elianagam 11/11/2011 19:00'!testCrearProductoConPrecioNegativoLanzaError	self should: [producto crearProducto: 'Notebook' conPrecio: -9000. ] raise:  ValorNegativoError 		! !